// Autogenerated code

#pragma warning disable
namespace DEnc.Serialization
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2634.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ffmpeg.org/schema/ffprobe")]
    [System.Xml.Serialization.XmlRootAttribute(ElementName ="ffprobe", Namespace = "http://www.ffmpeg.org/schema/ffprobe", IsNullable = false)]
    public partial class FFprobeData
    {

        #region Private fields
        private programVersionType _program_version;

        private List<libraryVersionType> _library_versions;

        private List<pixelFormatType> _pixel_formats;

        private List<packetType> _packets;

        private framesType _frames;

        private packetsAndFramesType _packets_and_frames;

        private List<programType> _programs;

        private List<MediaStream> _streams;

        private List<MediaChapter> _chapters;

        private VideoFormat _format;

        private errorType _error;

        private static XmlSerializer serializer;
        #endregion

        public FFprobeData()
        {
            this._error = new errorType();
            this._format = new VideoFormat();
            this._chapters = new List<MediaChapter>();
            this._streams = new List<MediaStream>();
            this._programs = new List<programType>();
            this._packets_and_frames = new packetsAndFramesType();
            this._frames = new framesType();
            this._packets = new List<packetType>();
            this._pixel_formats = new List<pixelFormatType>();
            this._library_versions = new List<libraryVersionType>();
            this._program_version = new programVersionType();
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public programVersionType program_version
        {
            get
            {
                return this._program_version;
            }
            set
            {
                this._program_version = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("library_version", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public List<libraryVersionType> library_versions
        {
            get
            {
                return this._library_versions;
            }
            set
            {
                this._library_versions = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("pixel_format", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public List<pixelFormatType> pixel_formats
        {
            get
            {
                return this._pixel_formats;
            }
            set
            {
                this._pixel_formats = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("packet", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public List<packetType> packets
        {
            get
            {
                return this._packets;
            }
            set
            {
                this._packets = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public framesType frames
        {
            get
            {
                return this._frames;
            }
            set
            {
                this._frames = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public packetsAndFramesType packets_and_frames
        {
            get
            {
                return this._packets_and_frames;
            }
            set
            {
                this._packets_and_frames = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("program", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public List<programType> programs
        {
            get
            {
                return this._programs;
            }
            set
            {
                this._programs = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("stream", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public List<MediaStream> streams
        {
            get
            {
                return this._streams;
            }
            set
            {
                this._streams = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("chapter", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public List<MediaChapter> chapters
        {
            get
            {
                return this._chapters;
            }
            set
            {
                this._chapters = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public VideoFormat format
        {
            get
            {
                return this._format;
            }
            set
            {
                this._format = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public errorType error
        {
            get
            {
                return this._error;
            }
            set
            {
                this._error = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(FFprobeData));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ffprobeType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ffprobeType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ffprobeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out FFprobeData obj, out System.Exception exception)
        {
            exception = null;
            obj = default(FFprobeData);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out FFprobeData obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static FFprobeData Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((FFprobeData)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static FFprobeData Deserialize(System.IO.Stream s)
        {
            return ((FFprobeData)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ffprobeType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ffprobeType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ffprobeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out FFprobeData obj, out System.Exception exception)
        {
            exception = null;
            obj = default(FFprobeData);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out FFprobeData obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static FFprobeData LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2634.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ffmpeg.org/schema/ffprobe")]
    public partial class programVersionType
    {

        #region Private fields
        private string _version;

        private string _copyright;

        private string _build_date;

        private string _build_time;

        private string _compiler_ident;

        private string _configuration;

        private static XmlSerializer serializer;
        #endregion

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string copyright
        {
            get
            {
                return this._copyright;
            }
            set
            {
                this._copyright = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string build_date
        {
            get
            {
                return this._build_date;
            }
            set
            {
                this._build_date = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string build_time
        {
            get
            {
                return this._build_time;
            }
            set
            {
                this._build_time = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string compiler_ident
        {
            get
            {
                return this._compiler_ident;
            }
            set
            {
                this._compiler_ident = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string configuration
        {
            get
            {
                return this._configuration;
            }
            set
            {
                this._configuration = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(programVersionType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current programVersionType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an programVersionType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output programVersionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out programVersionType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(programVersionType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out programVersionType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static programVersionType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((programVersionType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static programVersionType Deserialize(System.IO.Stream s)
        {
            return ((programVersionType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current programVersionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an programVersionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output programVersionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out programVersionType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(programVersionType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out programVersionType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static programVersionType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2634.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ffmpeg.org/schema/ffprobe")]
    public partial class errorType
    {

        #region Private fields
        private int _code;

        private string _string;

        private static XmlSerializer serializer;
        #endregion

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int code
        {
            get
            {
                return this._code;
            }
            set
            {
                this._code = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string @string
        {
            get
            {
                return this._string;
            }
            set
            {
                this._string = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(errorType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current errorType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an errorType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output errorType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out errorType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(errorType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out errorType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static errorType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((errorType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static errorType Deserialize(System.IO.Stream s)
        {
            return ((errorType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current errorType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an errorType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output errorType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out errorType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(errorType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out errorType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static errorType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2634.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ffmpeg.org/schema/ffprobe")]
    public partial class VideoFormat
    {

        #region Private fields
        private List<tagType> _tag;

        private string _filename;

        private int _nb_streams;

        private int _nb_programs;

        private string _format_name;

        private string _format_long_name;

        private float _start_time;

        private float _duration;

        private long _size;

        private long _bit_rate;

        private int _probe_score;

        private static XmlSerializer serializer;
        #endregion

        public VideoFormat()
        {
            this._tag = new List<tagType>();
        }

        [System.Xml.Serialization.XmlElementAttribute("tag", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<tagType> tag
        {
            get
            {
                return this._tag;
            }
            set
            {
                this._tag = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string filename
        {
            get
            {
                return this._filename;
            }
            set
            {
                this._filename = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int nb_streams
        {
            get
            {
                return this._nb_streams;
            }
            set
            {
                this._nb_streams = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int nb_programs
        {
            get
            {
                return this._nb_programs;
            }
            set
            {
                this._nb_programs = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string format_name
        {
            get
            {
                return this._format_name;
            }
            set
            {
                this._format_name = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string format_long_name
        {
            get
            {
                return this._format_long_name;
            }
            set
            {
                this._format_long_name = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float start_time
        {
            get
            {
                return this._start_time;
            }
            set
            {
                this._start_time = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float duration
        {
            get
            {
                return this._duration;
            }
            set
            {
                this._duration = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long size
        {
            get
            {
                return this._size;
            }
            set
            {
                this._size = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long bit_rate
        {
            get
            {
                return this._bit_rate;
            }
            set
            {
                this._bit_rate = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int probe_score
        {
            get
            {
                return this._probe_score;
            }
            set
            {
                this._probe_score = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(VideoFormat));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current formatType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an formatType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output formatType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out VideoFormat obj, out System.Exception exception)
        {
            exception = null;
            obj = default(VideoFormat);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out VideoFormat obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static VideoFormat Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((VideoFormat)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static VideoFormat Deserialize(System.IO.Stream s)
        {
            return ((VideoFormat)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current formatType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an formatType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output formatType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out VideoFormat obj, out System.Exception exception)
        {
            exception = null;
            obj = default(VideoFormat);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out VideoFormat obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static VideoFormat LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2634.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ffmpeg.org/schema/ffprobe")]
    public partial class tagType
    {

        #region Private fields
        private string _key;

        private string _value;

        private static XmlSerializer serializer;
        #endregion

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string key
        {
            get
            {
                return this._key;
            }
            set
            {
                this._key = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tagType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tagType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tagType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tagType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tagType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tagType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tagType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tagType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tagType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tagType Deserialize(System.IO.Stream s)
        {
            return ((tagType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tagType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tagType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tagType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tagType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tagType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tagType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tagType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2634.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ffmpeg.org/schema/ffprobe")]
    public partial class MediaChapter
    {

        #region Private fields
        private List<tagType> _tag;

        private int _id;

        private string _time_base;

        private int _start;

        private float _start_time;

        private int _end;

        private float _end_time;

        private static XmlSerializer serializer;
        #endregion

        public MediaChapter()
        {
            this._tag = new List<tagType>();
        }

        [System.Xml.Serialization.XmlElementAttribute("tag", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<tagType> tag
        {
            get
            {
                return this._tag;
            }
            set
            {
                this._tag = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string time_base
        {
            get
            {
                return this._time_base;
            }
            set
            {
                this._time_base = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int start
        {
            get
            {
                return this._start;
            }
            set
            {
                this._start = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float start_time
        {
            get
            {
                return this._start_time;
            }
            set
            {
                this._start_time = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int end
        {
            get
            {
                return this._end;
            }
            set
            {
                this._end = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float end_time
        {
            get
            {
                return this._end_time;
            }
            set
            {
                this._end_time = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(MediaChapter));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current chapterType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an chapterType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output chapterType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out MediaChapter obj, out System.Exception exception)
        {
            exception = null;
            obj = default(MediaChapter);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out MediaChapter obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static MediaChapter Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((MediaChapter)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static MediaChapter Deserialize(System.IO.Stream s)
        {
            return ((MediaChapter)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current chapterType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an chapterType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output chapterType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out MediaChapter obj, out System.Exception exception)
        {
            exception = null;
            obj = default(MediaChapter);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out MediaChapter obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static MediaChapter LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2634.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ffmpeg.org/schema/ffprobe")]
    public partial class streamDispositionType
    {

        #region Private fields
        private int _default;

        private int _dub;

        private int _original;

        private int _comment;

        private int _lyrics;

        private int _karaoke;

        private int _forced;

        private int _hearing_impaired;

        private int _visual_impaired;

        private int _clean_effects;

        private int _attached_pic;

        private int _timed_thumbnails;

        private static XmlSerializer serializer;
        #endregion

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int @default
        {
            get
            {
                return this._default;
            }
            set
            {
                this._default = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int dub
        {
            get
            {
                return this._dub;
            }
            set
            {
                this._dub = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int original
        {
            get
            {
                return this._original;
            }
            set
            {
                this._original = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int comment
        {
            get
            {
                return this._comment;
            }
            set
            {
                this._comment = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int lyrics
        {
            get
            {
                return this._lyrics;
            }
            set
            {
                this._lyrics = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int karaoke
        {
            get
            {
                return this._karaoke;
            }
            set
            {
                this._karaoke = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int forced
        {
            get
            {
                return this._forced;
            }
            set
            {
                this._forced = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int hearing_impaired
        {
            get
            {
                return this._hearing_impaired;
            }
            set
            {
                this._hearing_impaired = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int visual_impaired
        {
            get
            {
                return this._visual_impaired;
            }
            set
            {
                this._visual_impaired = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int clean_effects
        {
            get
            {
                return this._clean_effects;
            }
            set
            {
                this._clean_effects = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int attached_pic
        {
            get
            {
                return this._attached_pic;
            }
            set
            {
                this._attached_pic = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int timed_thumbnails
        {
            get
            {
                return this._timed_thumbnails;
            }
            set
            {
                this._timed_thumbnails = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(streamDispositionType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current streamDispositionType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an streamDispositionType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output streamDispositionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out streamDispositionType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(streamDispositionType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out streamDispositionType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static streamDispositionType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((streamDispositionType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static streamDispositionType Deserialize(System.IO.Stream s)
        {
            return ((streamDispositionType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current streamDispositionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an streamDispositionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output streamDispositionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out streamDispositionType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(streamDispositionType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out streamDispositionType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static streamDispositionType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2634.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ffmpeg.org/schema/ffprobe")]
    public partial class MediaStream
    {

        #region Private fields
        private streamDispositionType _disposition;

        private List<tagType> _tag;

        private List<packetSideDataType> _side_data_list;

        private int _index;

        private string _codec_name;

        private string _codec_long_name;

        private string _profile;

        private string _codec_type;

        private string _codec_time_base;

        private string _codec_tag;

        private string _codec_tag_string;

        private string _extradata;

        private string _extradata_hash;

        private int _width;

        private int _height;

        private int _coded_width;

        private int _coded_height;

        private int _has_b_frames;

        private string _sample_aspect_ratio;

        private string _display_aspect_ratio;

        private string _pix_fmt;

        private int _level;

        private string _color_range;

        private string _color_space;

        private string _color_transfer;

        private string _color_primaries;

        private string _chroma_location;

        private string _field_order;

        private string _timecode;

        private int _refs;

        private string _sample_fmt;

        private int _sample_rate;

        private int _channels;

        private string _channel_layout;

        private int _bits_per_sample;

        private string _id;

        private string _r_frame_rate;

        private string _avg_frame_rate;

        private string _time_base;

        private long _start_pts;

        private float _start_time;

        private long _duration_ts;

        private float _duration;

        private int _bit_rate;

        private int _max_bit_rate;

        private int _bits_per_raw_sample;

        private int _nb_frames;

        private int _nb_read_frames;

        private int _nb_read_packets;

        private static XmlSerializer serializer;
        #endregion

        public MediaStream()
        {
            this._side_data_list = new List<packetSideDataType>();
            this._tag = new List<tagType>();
            this._disposition = new streamDispositionType();
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public streamDispositionType disposition
        {
            get
            {
                return this._disposition;
            }
            set
            {
                this._disposition = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("tag", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<tagType> tag
        {
            get
            {
                return this._tag;
            }
            set
            {
                this._tag = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("side_data", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public List<packetSideDataType> side_data_list
        {
            get
            {
                return this._side_data_list;
            }
            set
            {
                this._side_data_list = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int index
        {
            get
            {
                return this._index;
            }
            set
            {
                this._index = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string codec_name
        {
            get
            {
                return this._codec_name;
            }
            set
            {
                this._codec_name = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string codec_long_name
        {
            get
            {
                return this._codec_long_name;
            }
            set
            {
                this._codec_long_name = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string profile
        {
            get
            {
                return this._profile;
            }
            set
            {
                this._profile = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string codec_type
        {
            get
            {
                return this._codec_type;
            }
            set
            {
                this._codec_type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string codec_time_base
        {
            get
            {
                return this._codec_time_base;
            }
            set
            {
                this._codec_time_base = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string codec_tag
        {
            get
            {
                return this._codec_tag;
            }
            set
            {
                this._codec_tag = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string codec_tag_string
        {
            get
            {
                return this._codec_tag_string;
            }
            set
            {
                this._codec_tag_string = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string extradata
        {
            get
            {
                return this._extradata;
            }
            set
            {
                this._extradata = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string extradata_hash
        {
            get
            {
                return this._extradata_hash;
            }
            set
            {
                this._extradata_hash = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int width
        {
            get
            {
                return this._width;
            }
            set
            {
                this._width = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int height
        {
            get
            {
                return this._height;
            }
            set
            {
                this._height = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int coded_width
        {
            get
            {
                return this._coded_width;
            }
            set
            {
                this._coded_width = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int coded_height
        {
            get
            {
                return this._coded_height;
            }
            set
            {
                this._coded_height = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int has_b_frames
        {
            get
            {
                return this._has_b_frames;
            }
            set
            {
                this._has_b_frames = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string sample_aspect_ratio
        {
            get
            {
                return this._sample_aspect_ratio;
            }
            set
            {
                this._sample_aspect_ratio = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string display_aspect_ratio
        {
            get
            {
                return this._display_aspect_ratio;
            }
            set
            {
                this._display_aspect_ratio = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string pix_fmt
        {
            get
            {
                return this._pix_fmt;
            }
            set
            {
                this._pix_fmt = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int level
        {
            get
            {
                return this._level;
            }
            set
            {
                this._level = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string color_range
        {
            get
            {
                return this._color_range;
            }
            set
            {
                this._color_range = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string color_space
        {
            get
            {
                return this._color_space;
            }
            set
            {
                this._color_space = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string color_transfer
        {
            get
            {
                return this._color_transfer;
            }
            set
            {
                this._color_transfer = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string color_primaries
        {
            get
            {
                return this._color_primaries;
            }
            set
            {
                this._color_primaries = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string chroma_location
        {
            get
            {
                return this._chroma_location;
            }
            set
            {
                this._chroma_location = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string field_order
        {
            get
            {
                return this._field_order;
            }
            set
            {
                this._field_order = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string timecode
        {
            get
            {
                return this._timecode;
            }
            set
            {
                this._timecode = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int refs
        {
            get
            {
                return this._refs;
            }
            set
            {
                this._refs = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string sample_fmt
        {
            get
            {
                return this._sample_fmt;
            }
            set
            {
                this._sample_fmt = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int sample_rate
        {
            get
            {
                return this._sample_rate;
            }
            set
            {
                this._sample_rate = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int channels
        {
            get
            {
                return this._channels;
            }
            set
            {
                this._channels = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string channel_layout
        {
            get
            {
                return this._channel_layout;
            }
            set
            {
                this._channel_layout = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int bits_per_sample
        {
            get
            {
                return this._bits_per_sample;
            }
            set
            {
                this._bits_per_sample = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string r_frame_rate
        {
            get
            {
                return this._r_frame_rate;
            }
            set
            {
                this._r_frame_rate = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string avg_frame_rate
        {
            get
            {
                return this._avg_frame_rate;
            }
            set
            {
                this._avg_frame_rate = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string time_base
        {
            get
            {
                return this._time_base;
            }
            set
            {
                this._time_base = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long start_pts
        {
            get
            {
                return this._start_pts;
            }
            set
            {
                this._start_pts = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float start_time
        {
            get
            {
                return this._start_time;
            }
            set
            {
                this._start_time = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long duration_ts
        {
            get
            {
                return this._duration_ts;
            }
            set
            {
                this._duration_ts = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float duration
        {
            get
            {
                return this._duration;
            }
            set
            {
                this._duration = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int bit_rate
        {
            get
            {
                return this._bit_rate;
            }
            set
            {
                this._bit_rate = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int max_bit_rate
        {
            get
            {
                return this._max_bit_rate;
            }
            set
            {
                this._max_bit_rate = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int bits_per_raw_sample
        {
            get
            {
                return this._bits_per_raw_sample;
            }
            set
            {
                this._bits_per_raw_sample = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int nb_frames
        {
            get
            {
                return this._nb_frames;
            }
            set
            {
                this._nb_frames = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int nb_read_frames
        {
            get
            {
                return this._nb_read_frames;
            }
            set
            {
                this._nb_read_frames = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int nb_read_packets
        {
            get
            {
                return this._nb_read_packets;
            }
            set
            {
                this._nb_read_packets = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(MediaStream));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current streamType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an streamType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output streamType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out MediaStream obj, out System.Exception exception)
        {
            exception = null;
            obj = default(MediaStream);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out MediaStream obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static MediaStream Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((MediaStream)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static MediaStream Deserialize(System.IO.Stream s)
        {
            return ((MediaStream)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current streamType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an streamType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output streamType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out MediaStream obj, out System.Exception exception)
        {
            exception = null;
            obj = default(MediaStream);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out MediaStream obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static MediaStream LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2634.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ffmpeg.org/schema/ffprobe")]
    public partial class packetSideDataType
    {

        #region Private fields
        private string _side_data_type;

        private int _side_data_size;

        private static XmlSerializer serializer;
        #endregion

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string side_data_type
        {
            get
            {
                return this._side_data_type;
            }
            set
            {
                this._side_data_type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int side_data_size
        {
            get
            {
                return this._side_data_size;
            }
            set
            {
                this._side_data_size = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(packetSideDataType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current packetSideDataType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an packetSideDataType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output packetSideDataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out packetSideDataType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(packetSideDataType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out packetSideDataType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static packetSideDataType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((packetSideDataType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static packetSideDataType Deserialize(System.IO.Stream s)
        {
            return ((packetSideDataType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current packetSideDataType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an packetSideDataType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output packetSideDataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out packetSideDataType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(packetSideDataType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out packetSideDataType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static packetSideDataType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2634.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ffmpeg.org/schema/ffprobe")]
    public partial class programType
    {

        #region Private fields
        private List<tagType> _tag;

        private List<MediaStream> _streams;

        private int _program_id;

        private int _program_num;

        private int _nb_streams;

        private float _start_time;

        private long _start_pts;

        private float _end_time;

        private long _end_pts;

        private int _pmt_pid;

        private int _pcr_pid;

        private static XmlSerializer serializer;
        #endregion

        public programType()
        {
            this._streams = new List<MediaStream>();
            this._tag = new List<tagType>();
        }

        [System.Xml.Serialization.XmlElementAttribute("tag", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<tagType> tag
        {
            get
            {
                return this._tag;
            }
            set
            {
                this._tag = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("stream", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public List<MediaStream> streams
        {
            get
            {
                return this._streams;
            }
            set
            {
                this._streams = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int program_id
        {
            get
            {
                return this._program_id;
            }
            set
            {
                this._program_id = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int program_num
        {
            get
            {
                return this._program_num;
            }
            set
            {
                this._program_num = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int nb_streams
        {
            get
            {
                return this._nb_streams;
            }
            set
            {
                this._nb_streams = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float start_time
        {
            get
            {
                return this._start_time;
            }
            set
            {
                this._start_time = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long start_pts
        {
            get
            {
                return this._start_pts;
            }
            set
            {
                this._start_pts = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float end_time
        {
            get
            {
                return this._end_time;
            }
            set
            {
                this._end_time = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long end_pts
        {
            get
            {
                return this._end_pts;
            }
            set
            {
                this._end_pts = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int pmt_pid
        {
            get
            {
                return this._pmt_pid;
            }
            set
            {
                this._pmt_pid = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int pcr_pid
        {
            get
            {
                return this._pcr_pid;
            }
            set
            {
                this._pcr_pid = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(programType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current programType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an programType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output programType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out programType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(programType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out programType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static programType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((programType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static programType Deserialize(System.IO.Stream s)
        {
            return ((programType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current programType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an programType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output programType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out programType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(programType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out programType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static programType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2634.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ffmpeg.org/schema/ffprobe")]
    public partial class packetsAndFramesType
    {

        #region Private fields
        private List<object> _items;

        private static XmlSerializer serializer;
        #endregion

        public packetsAndFramesType()
        {
            this._items = new List<object>();
        }

        [System.Xml.Serialization.XmlElementAttribute("frame", typeof(frameType), Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlElementAttribute("packet", typeof(packetType), Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlElementAttribute("subtitle", typeof(subtitleType), Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<object> Items
        {
            get
            {
                return this._items;
            }
            set
            {
                this._items = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(packetsAndFramesType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current packetsAndFramesType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an packetsAndFramesType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output packetsAndFramesType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out packetsAndFramesType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(packetsAndFramesType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out packetsAndFramesType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static packetsAndFramesType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((packetsAndFramesType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static packetsAndFramesType Deserialize(System.IO.Stream s)
        {
            return ((packetsAndFramesType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current packetsAndFramesType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an packetsAndFramesType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output packetsAndFramesType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out packetsAndFramesType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(packetsAndFramesType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out packetsAndFramesType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static packetsAndFramesType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2634.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ffmpeg.org/schema/ffprobe")]
    public partial class frameType
    {

        #region Private fields
        private List<tagType> _tag;

        private List<logType> _logs;

        private List<frameSideDataType> _side_data_list;

        private string _media_type;

        private int _stream_index;

        private int _key_frame;

        private long _pts;

        private float _pts_time;

        private long _pkt_pts;

        private float _pkt_pts_time;

        private long _pkt_dts;

        private float _pkt_dts_time;

        private long _best_effort_timestamp;

        private float _best_effort_timestamp_time;

        private long _pkt_duration;

        private float _pkt_duration_time;

        private long _pkt_pos;

        private int _pkt_size;

        private string _sample_fmt;

        private long _nb_samples;

        private int _channels;

        private string _channel_layout;

        private long _width;

        private long _height;

        private string _pix_fmt;

        private string _sample_aspect_ratio;

        private string _pict_type;

        private long _coded_picture_number;

        private long _display_picture_number;

        private int _interlaced_frame;

        private int _top_field_first;

        private int _repeat_pict;

        private string _color_range;

        private string _color_space;

        private string _color_primaries;

        private string _color_transfer;

        private string _chroma_location;

        private static XmlSerializer serializer;
        #endregion

        public frameType()
        {
            this._side_data_list = new List<frameSideDataType>();
            this._logs = new List<logType>();
            this._tag = new List<tagType>();
        }

        [System.Xml.Serialization.XmlElementAttribute("tag", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<tagType> tag
        {
            get
            {
                return this._tag;
            }
            set
            {
                this._tag = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("log", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public List<logType> logs
        {
            get
            {
                return this._logs;
            }
            set
            {
                this._logs = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("side_data", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public List<frameSideDataType> side_data_list
        {
            get
            {
                return this._side_data_list;
            }
            set
            {
                this._side_data_list = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string media_type
        {
            get
            {
                return this._media_type;
            }
            set
            {
                this._media_type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int stream_index
        {
            get
            {
                return this._stream_index;
            }
            set
            {
                this._stream_index = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int key_frame
        {
            get
            {
                return this._key_frame;
            }
            set
            {
                this._key_frame = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long pts
        {
            get
            {
                return this._pts;
            }
            set
            {
                this._pts = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float pts_time
        {
            get
            {
                return this._pts_time;
            }
            set
            {
                this._pts_time = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long pkt_pts
        {
            get
            {
                return this._pkt_pts;
            }
            set
            {
                this._pkt_pts = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float pkt_pts_time
        {
            get
            {
                return this._pkt_pts_time;
            }
            set
            {
                this._pkt_pts_time = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long pkt_dts
        {
            get
            {
                return this._pkt_dts;
            }
            set
            {
                this._pkt_dts = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float pkt_dts_time
        {
            get
            {
                return this._pkt_dts_time;
            }
            set
            {
                this._pkt_dts_time = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long best_effort_timestamp
        {
            get
            {
                return this._best_effort_timestamp;
            }
            set
            {
                this._best_effort_timestamp = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float best_effort_timestamp_time
        {
            get
            {
                return this._best_effort_timestamp_time;
            }
            set
            {
                this._best_effort_timestamp_time = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long pkt_duration
        {
            get
            {
                return this._pkt_duration;
            }
            set
            {
                this._pkt_duration = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float pkt_duration_time
        {
            get
            {
                return this._pkt_duration_time;
            }
            set
            {
                this._pkt_duration_time = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long pkt_pos
        {
            get
            {
                return this._pkt_pos;
            }
            set
            {
                this._pkt_pos = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int pkt_size
        {
            get
            {
                return this._pkt_size;
            }
            set
            {
                this._pkt_size = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string sample_fmt
        {
            get
            {
                return this._sample_fmt;
            }
            set
            {
                this._sample_fmt = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long nb_samples
        {
            get
            {
                return this._nb_samples;
            }
            set
            {
                this._nb_samples = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int channels
        {
            get
            {
                return this._channels;
            }
            set
            {
                this._channels = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string channel_layout
        {
            get
            {
                return this._channel_layout;
            }
            set
            {
                this._channel_layout = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long width
        {
            get
            {
                return this._width;
            }
            set
            {
                this._width = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long height
        {
            get
            {
                return this._height;
            }
            set
            {
                this._height = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string pix_fmt
        {
            get
            {
                return this._pix_fmt;
            }
            set
            {
                this._pix_fmt = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string sample_aspect_ratio
        {
            get
            {
                return this._sample_aspect_ratio;
            }
            set
            {
                this._sample_aspect_ratio = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string pict_type
        {
            get
            {
                return this._pict_type;
            }
            set
            {
                this._pict_type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long coded_picture_number
        {
            get
            {
                return this._coded_picture_number;
            }
            set
            {
                this._coded_picture_number = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long display_picture_number
        {
            get
            {
                return this._display_picture_number;
            }
            set
            {
                this._display_picture_number = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int interlaced_frame
        {
            get
            {
                return this._interlaced_frame;
            }
            set
            {
                this._interlaced_frame = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int top_field_first
        {
            get
            {
                return this._top_field_first;
            }
            set
            {
                this._top_field_first = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int repeat_pict
        {
            get
            {
                return this._repeat_pict;
            }
            set
            {
                this._repeat_pict = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string color_range
        {
            get
            {
                return this._color_range;
            }
            set
            {
                this._color_range = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string color_space
        {
            get
            {
                return this._color_space;
            }
            set
            {
                this._color_space = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string color_primaries
        {
            get
            {
                return this._color_primaries;
            }
            set
            {
                this._color_primaries = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string color_transfer
        {
            get
            {
                return this._color_transfer;
            }
            set
            {
                this._color_transfer = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string chroma_location
        {
            get
            {
                return this._chroma_location;
            }
            set
            {
                this._chroma_location = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(frameType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current frameType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an frameType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output frameType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out frameType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(frameType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out frameType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static frameType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((frameType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static frameType Deserialize(System.IO.Stream s)
        {
            return ((frameType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current frameType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an frameType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output frameType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out frameType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(frameType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out frameType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static frameType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2634.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ffmpeg.org/schema/ffprobe")]
    public partial class logType
    {

        #region Private fields
        private string _context;

        private int _level;

        private int _category;

        private string _parent_context;

        private int _parent_category;

        private string _message;

        private static XmlSerializer serializer;
        #endregion

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string context
        {
            get
            {
                return this._context;
            }
            set
            {
                this._context = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int level
        {
            get
            {
                return this._level;
            }
            set
            {
                this._level = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int category
        {
            get
            {
                return this._category;
            }
            set
            {
                this._category = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string parent_context
        {
            get
            {
                return this._parent_context;
            }
            set
            {
                this._parent_context = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int parent_category
        {
            get
            {
                return this._parent_category;
            }
            set
            {
                this._parent_category = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string message
        {
            get
            {
                return this._message;
            }
            set
            {
                this._message = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(logType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current logType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an logType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output logType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out logType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(logType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out logType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static logType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((logType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static logType Deserialize(System.IO.Stream s)
        {
            return ((logType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current logType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an logType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output logType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out logType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(logType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out logType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static logType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2634.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ffmpeg.org/schema/ffprobe")]
    public partial class frameSideDataType
    {

        #region Private fields
        private string _side_data_type;

        private int _side_data_size;

        private string _timecode;

        private static XmlSerializer serializer;
        #endregion

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string side_data_type
        {
            get
            {
                return this._side_data_type;
            }
            set
            {
                this._side_data_type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int side_data_size
        {
            get
            {
                return this._side_data_size;
            }
            set
            {
                this._side_data_size = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string timecode
        {
            get
            {
                return this._timecode;
            }
            set
            {
                this._timecode = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(frameSideDataType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current frameSideDataType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an frameSideDataType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output frameSideDataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out frameSideDataType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(frameSideDataType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out frameSideDataType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static frameSideDataType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((frameSideDataType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static frameSideDataType Deserialize(System.IO.Stream s)
        {
            return ((frameSideDataType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current frameSideDataType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an frameSideDataType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output frameSideDataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out frameSideDataType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(frameSideDataType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out frameSideDataType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static frameSideDataType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2634.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ffmpeg.org/schema/ffprobe")]
    public partial class packetType
    {

        #region Private fields
        private List<tagType> _tag;

        private List<packetSideDataType> _side_data_list;

        private string _codec_type;

        private int _stream_index;

        private long _pts;

        private float _pts_time;

        private long _dts;

        private float _dts_time;

        private long _duration;

        private float _duration_time;

        private long _convergence_duration;

        private float _convergence_duration_time;

        private long _size;

        private long _pos;

        private string _flags;

        private string _data;

        private string _data_hash;

        private static XmlSerializer serializer;
        #endregion

        public packetType()
        {
            this._side_data_list = new List<packetSideDataType>();
            this._tag = new List<tagType>();
        }

        [System.Xml.Serialization.XmlElementAttribute("tag", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<tagType> tag
        {
            get
            {
                return this._tag;
            }
            set
            {
                this._tag = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("side_data", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public List<packetSideDataType> side_data_list
        {
            get
            {
                return this._side_data_list;
            }
            set
            {
                this._side_data_list = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string codec_type
        {
            get
            {
                return this._codec_type;
            }
            set
            {
                this._codec_type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int stream_index
        {
            get
            {
                return this._stream_index;
            }
            set
            {
                this._stream_index = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long pts
        {
            get
            {
                return this._pts;
            }
            set
            {
                this._pts = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float pts_time
        {
            get
            {
                return this._pts_time;
            }
            set
            {
                this._pts_time = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long dts
        {
            get
            {
                return this._dts;
            }
            set
            {
                this._dts = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float dts_time
        {
            get
            {
                return this._dts_time;
            }
            set
            {
                this._dts_time = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long duration
        {
            get
            {
                return this._duration;
            }
            set
            {
                this._duration = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float duration_time
        {
            get
            {
                return this._duration_time;
            }
            set
            {
                this._duration_time = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long convergence_duration
        {
            get
            {
                return this._convergence_duration;
            }
            set
            {
                this._convergence_duration = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float convergence_duration_time
        {
            get
            {
                return this._convergence_duration_time;
            }
            set
            {
                this._convergence_duration_time = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long size
        {
            get
            {
                return this._size;
            }
            set
            {
                this._size = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long pos
        {
            get
            {
                return this._pos;
            }
            set
            {
                this._pos = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string flags
        {
            get
            {
                return this._flags;
            }
            set
            {
                this._flags = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string data
        {
            get
            {
                return this._data;
            }
            set
            {
                this._data = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string data_hash
        {
            get
            {
                return this._data_hash;
            }
            set
            {
                this._data_hash = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(packetType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current packetType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an packetType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output packetType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out packetType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(packetType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out packetType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static packetType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((packetType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static packetType Deserialize(System.IO.Stream s)
        {
            return ((packetType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current packetType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an packetType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output packetType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out packetType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(packetType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out packetType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static packetType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2634.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ffmpeg.org/schema/ffprobe")]
    public partial class subtitleType
    {

        #region Private fields
        private string _media_type;

        private long _pts;

        private float _pts_time;

        private int _format;

        private int _start_display_time;

        private int _end_display_time;

        private int _num_rects;

        private static XmlSerializer serializer;
        #endregion

        public subtitleType()
        {
            this._media_type = "subtitle";
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string media_type
        {
            get
            {
                return this._media_type;
            }
            set
            {
                this._media_type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long pts
        {
            get
            {
                return this._pts;
            }
            set
            {
                this._pts = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float pts_time
        {
            get
            {
                return this._pts_time;
            }
            set
            {
                this._pts_time = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int format
        {
            get
            {
                return this._format;
            }
            set
            {
                this._format = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int start_display_time
        {
            get
            {
                return this._start_display_time;
            }
            set
            {
                this._start_display_time = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int end_display_time
        {
            get
            {
                return this._end_display_time;
            }
            set
            {
                this._end_display_time = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int num_rects
        {
            get
            {
                return this._num_rects;
            }
            set
            {
                this._num_rects = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(subtitleType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current subtitleType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an subtitleType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output subtitleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out subtitleType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(subtitleType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out subtitleType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static subtitleType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((subtitleType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static subtitleType Deserialize(System.IO.Stream s)
        {
            return ((subtitleType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current subtitleType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an subtitleType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output subtitleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out subtitleType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(subtitleType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out subtitleType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static subtitleType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2634.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ffmpeg.org/schema/ffprobe")]
    public partial class framesType
    {

        #region Private fields
        private List<object> _items;

        private static XmlSerializer serializer;
        #endregion

        public framesType()
        {
            this._items = new List<object>();
        }

        [System.Xml.Serialization.XmlElementAttribute("frame", typeof(frameType), Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlElementAttribute("subtitle", typeof(subtitleType), Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<object> Items
        {
            get
            {
                return this._items;
            }
            set
            {
                this._items = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(framesType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current framesType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an framesType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output framesType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out framesType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(framesType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out framesType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static framesType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((framesType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static framesType Deserialize(System.IO.Stream s)
        {
            return ((framesType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current framesType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an framesType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output framesType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out framesType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(framesType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out framesType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static framesType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2634.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ffmpeg.org/schema/ffprobe")]
    public partial class pixelFormatComponentType
    {

        #region Private fields
        private int _index;

        private int _bit_depth;

        private static XmlSerializer serializer;
        #endregion

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int index
        {
            get
            {
                return this._index;
            }
            set
            {
                this._index = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int bit_depth
        {
            get
            {
                return this._bit_depth;
            }
            set
            {
                this._bit_depth = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(pixelFormatComponentType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current pixelFormatComponentType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an pixelFormatComponentType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output pixelFormatComponentType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out pixelFormatComponentType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(pixelFormatComponentType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out pixelFormatComponentType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static pixelFormatComponentType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((pixelFormatComponentType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static pixelFormatComponentType Deserialize(System.IO.Stream s)
        {
            return ((pixelFormatComponentType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current pixelFormatComponentType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an pixelFormatComponentType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output pixelFormatComponentType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out pixelFormatComponentType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(pixelFormatComponentType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out pixelFormatComponentType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static pixelFormatComponentType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2634.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ffmpeg.org/schema/ffprobe")]
    public partial class pixelFormatFlagsType
    {

        #region Private fields
        private int _big_endian;

        private int _palette;

        private int _bitstream;

        private int _hwaccel;

        private int _planar;

        private int _rgb;

        private int _pseudopal;

        private int _alpha;

        private static XmlSerializer serializer;
        #endregion

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int big_endian
        {
            get
            {
                return this._big_endian;
            }
            set
            {
                this._big_endian = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int palette
        {
            get
            {
                return this._palette;
            }
            set
            {
                this._palette = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int bitstream
        {
            get
            {
                return this._bitstream;
            }
            set
            {
                this._bitstream = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int hwaccel
        {
            get
            {
                return this._hwaccel;
            }
            set
            {
                this._hwaccel = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int planar
        {
            get
            {
                return this._planar;
            }
            set
            {
                this._planar = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int rgb
        {
            get
            {
                return this._rgb;
            }
            set
            {
                this._rgb = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int pseudopal
        {
            get
            {
                return this._pseudopal;
            }
            set
            {
                this._pseudopal = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int alpha
        {
            get
            {
                return this._alpha;
            }
            set
            {
                this._alpha = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(pixelFormatFlagsType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current pixelFormatFlagsType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an pixelFormatFlagsType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output pixelFormatFlagsType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out pixelFormatFlagsType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(pixelFormatFlagsType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out pixelFormatFlagsType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static pixelFormatFlagsType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((pixelFormatFlagsType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static pixelFormatFlagsType Deserialize(System.IO.Stream s)
        {
            return ((pixelFormatFlagsType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current pixelFormatFlagsType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an pixelFormatFlagsType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output pixelFormatFlagsType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out pixelFormatFlagsType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(pixelFormatFlagsType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out pixelFormatFlagsType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static pixelFormatFlagsType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2634.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ffmpeg.org/schema/ffprobe")]
    public partial class pixelFormatType
    {

        #region Private fields
        private pixelFormatFlagsType _flags;

        private List<pixelFormatComponentType> _components;

        private string _name;

        private int _nb_components;

        private int _log2_chroma_w;

        private int _log2_chroma_h;

        private int _bits_per_pixel;

        private static XmlSerializer serializer;
        #endregion

        public pixelFormatType()
        {
            this._components = new List<pixelFormatComponentType>();
            this._flags = new pixelFormatFlagsType();
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public pixelFormatFlagsType flags
        {
            get
            {
                return this._flags;
            }
            set
            {
                this._flags = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("component", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public List<pixelFormatComponentType> components
        {
            get
            {
                return this._components;
            }
            set
            {
                this._components = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int nb_components
        {
            get
            {
                return this._nb_components;
            }
            set
            {
                this._nb_components = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int log2_chroma_w
        {
            get
            {
                return this._log2_chroma_w;
            }
            set
            {
                this._log2_chroma_w = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int log2_chroma_h
        {
            get
            {
                return this._log2_chroma_h;
            }
            set
            {
                this._log2_chroma_h = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int bits_per_pixel
        {
            get
            {
                return this._bits_per_pixel;
            }
            set
            {
                this._bits_per_pixel = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(pixelFormatType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current pixelFormatType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an pixelFormatType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output pixelFormatType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out pixelFormatType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(pixelFormatType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out pixelFormatType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static pixelFormatType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((pixelFormatType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static pixelFormatType Deserialize(System.IO.Stream s)
        {
            return ((pixelFormatType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current pixelFormatType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an pixelFormatType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output pixelFormatType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out pixelFormatType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(pixelFormatType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out pixelFormatType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static pixelFormatType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2634.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ffmpeg.org/schema/ffprobe")]
    public partial class libraryVersionType
    {

        #region Private fields
        private string _name;

        private int _major;

        private int _minor;

        private int _micro;

        private int _version;

        private string _ident;

        private static XmlSerializer serializer;
        #endregion

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int major
        {
            get
            {
                return this._major;
            }
            set
            {
                this._major = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int minor
        {
            get
            {
                return this._minor;
            }
            set
            {
                this._minor = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int micro
        {
            get
            {
                return this._micro;
            }
            set
            {
                this._micro = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ident
        {
            get
            {
                return this._ident;
            }
            set
            {
                this._ident = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(libraryVersionType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current libraryVersionType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an libraryVersionType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output libraryVersionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out libraryVersionType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(libraryVersionType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out libraryVersionType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static libraryVersionType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((libraryVersionType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static libraryVersionType Deserialize(System.IO.Stream s)
        {
            return ((libraryVersionType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current libraryVersionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an libraryVersionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output libraryVersionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out libraryVersionType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(libraryVersionType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out libraryVersionType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static libraryVersionType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore